---
import Airtable from 'airtable';

// 1. CONFIGURAZIONE AIRTABLE (invariata)
const base = new Airtable({
  apiKey: import.meta.env.PUBLIC_AIRTABLE_API_KEY
}).base(import.meta.env.PUBLIC_AIRTABLE_BASE_ID);

// 2. RECUPERO DATI CON LA NUOVA STRUTTURA
let items = [];
try {
  const records = await base(import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME)
    .select({ maxRecords: 100, sort: [{field: "Name", direction: "asc"}] }) // Ordina alfabeticamente per nome
    .all();
 
  // Mappa i record con tutti i nuovi campi
  items = records.map(record => ({
    id: record.id,
    nome: record.fields.Name,
    scientific: record.fields.Scientific,
    description: record.fields.Description,
    image: record.fields.Photo?.[0]?.url,
    categoria: record.fields.Category || 'Senza Categoria', // Fallback se la categoria manca
    // Campi tassonomici aggiuntivi
    divisione: record.fields.Divisione,
    classe: record.fields.Classe,
    sottoclasse: record.fields.Sottoclasse,
    ordine: record.fields.Ordine,
    famiglia: record.fields.Famiglia,
    tribù: record.fields.Tribù,
    genere: record.fields.Genere
  }));
} catch (error) {
  console.error('Errore caricamento dati:', error);
}

// 3. RAGGRUPPAMENTO PER CATEGORIA (dal primo codice, adattato)
const groupedItems = {};
items.forEach(item => {
  if (!groupedItems[item.categoria]) {
    groupedItems[item.categoria] = [];
  }
  groupedItems[item.categoria].push(item);
});


const titolo = "URBINO BOTANICAL GARDEN";
---

<html lang="it">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{titolo}</title>
<style>
    /* Stile del primo codice - completamente ripreso */
    :root {
      --verde-scuro: #ffffff;
      --testo-chiaro: rgba(242, 242, 242, 0.94);
      --verde-card: #121212;
      --verde-sfondo: #080808;
      --ombreggiatura: rgba(0, 0, 0, 0.05);
      --ombreggiatura-hover: rgba(0, 0, 0, 0.1);
      --bordo-colore: #2e2e2e;
      --scrollbar-bg: #202020;
      --scrollbar-thumb: #3e3e3e;
    }

    body {
      background-color: var(--verde-sfondo);
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
      color: var(--verde-scuro);
      margin: 0;
      padding: 3rem;
    }
    
    .main-title, .category-title {
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--bordo-colore);
    }
    .main-title {
        font-size: 1.5rem;
        text-align: left;
    }
    .category-section {
        margin-bottom: 4rem;
    }
    .category-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }
    
    /* Galleria scorrevole */
    .grid {
      display: flex;
      overflow-x: auto;
      flex-wrap: nowrap;
      gap: 1.5rem;
      padding-block: 1.5rem;
      scroll-snap-type: x mandatory;
      -webkit-overflow-scrolling: touch;
    }

    /* Stile delle Card */
    .card {
      width: 280px; /* Leggermente più larga per contenere più testo */
      flex-shrink: 0;
      scroll-snap-align: start;
      background-color: var(--verde-card);
      color: var(--verde-scuro);
      border-radius: 3px;
      overflow: hidden;
      border: 1px solid var(--bordo-colore);
      box-shadow: 0 4px 6px var(--ombreggiatura);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      display: flex;
      flex-direction: column;
    }
    
    .card-content {
        padding: 1rem;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }

    .card img {  
      width: 100%;  
      height: 160px;
      object-fit: cover;  
      display: block;
      transition: transform 0.3s ease;
    }

    .card h2 {  
      font-size: 1.2rem;
      margin: 0 0 0.25rem 0;
    }
    .card h4 {  
      font-size: 0.9rem;
      font-style: italic;
      font-weight: normal;
      margin: 0 0 1rem 0;  
      opacity: 0.7;  
    }
    .card .description { /* Classe specifica per la descrizione */
      font-size: 0.85rem;
      line-height: 1.5;  
      margin: auto 0 0 0; /* Spinge la descrizione in basso */
      padding-top: 1rem;  /* Spazio sopra la descrizione */
      flex-grow: 1;
      text-align: left;  
    }

    /* Dettagli tassonomici */
    .taxonomic-details {
        font-size: 0.75rem;
        opacity: 0.6;
        margin-bottom: 0.5rem;
    }
    .taxonomic-details p {
        margin: 0.1rem 0;
    }
    
    /* Effetti hover */
    .card:hover {  
      transform: translateY(-8px);  
      box-shadow: 0 12px 20px var(--ombreggiatura-hover);  
    }
    .card:hover img {
      transform: scale(1.05);
    }
    .card-image-wrapper { position: relative; overflow: hidden; }
    .card-image-wrapper::before { content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.4); opacity: 0; transition: opacity 0.3s ease; z-index: 1; }
    .card:hover .card-image-wrapper::before { opacity: 1; }

    /* Scrollbar */
    .grid::-webkit-scrollbar { height: 8px; }
    .grid::-webkit-scrollbar-track { background: var(--scrollbar-bg); border-radius: 4px; }
    .grid::-webkit-scrollbar-thumb { background: var(--scrollbar-thumb); border-radius: 4px; }
    .grid::-webkit-scrollbar-thumb:hover { background: #555; }
    
    /* Stile del Form */
    details {
        margin-top: 2rem;
        padding: 1.5rem;
        border: 1px solid var(--bordo-colore);
        border-radius: 3px;
        background-color: var(--verde-card);
    }
    summary {
        font-weight: 600;
        cursor: pointer;
        font-size: 1.2rem;
    }
    .contribute-form {
        margin-top: 1.5rem;
        display: grid;
        gap: 1rem;
    }
    .form-group {
        display: flex;
        flex-direction: column;
    }
    .form-group label {
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        opacity: 0.8;
    }
    .form-group input,
    .form-group textarea,
    .form-group select {
        width: 100%;
        padding: 0.75rem;
        background-color: var(--verde-sfondo);
        border: 1px solid var(--bordo-colore);
        border-radius: 3px;
        color: var(--testo-chiaro);
        font-size: 1rem;
    }
    .submit-btn {
        padding: 0.75rem 1.5rem;
        background-color: var(--verde-scuro);
        color: var(--verde-sfondo);
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.3s ease;
    }
    .submit-btn:hover {
        background-color: #ccc;
    }
    .submit-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    .form-message {
        margin-top: 1rem;
        padding: 1rem;
        border-radius: 3px;
    }
    .form-message.success {
        background-color: #28a74520;
        color: #28a745;
    }
    .form-message.error {
        background-color: #dc354520;
        color: #dc3545;
    }
</style>
</head>
<body>
    <h1 class="main-title">{titolo}</h1>

    {Object.entries(groupedItems).map(([category, categoryItems]) => (
        <section class="category-section">
            <h2 class="category-title">{category}</h2>
            <div class="grid">
                {categoryItems.map(item => (
                    <article class="card">
                        {item.image && (
                            <div class="card-image-wrapper">
                                <img src={item.image} alt={item.nome} />
                            </div>
                        )}
                        <div class="card-content">
                            <h2>{item.nome}</h2>
                            <h4>{item.scientific}</h4>
                            
                            <div class="taxonomic-details">
                                {item.famiglia && <p><strong>Famiglia:</strong> {item.famiglia}</p>}
                                {item.genere && <p><strong>Genere:</strong> {item.genere}</p>}
                                {item.classe && <p><strong>Classe:</strong> {item.classe}</p>}
                            </div>
                            
                            <p class="description">{item.description}</p>
                        </div>
                    </article>
                ))}
            </div>
        </section>
    ))}

    <details class="contribute-section">
      <summary>Vuoi contribuire all'archivio?</summary>
      
      <form id="contribute-form" class="contribute-form">
        <div class="form-group">
          <label for="name">Nome pianta*</label>
          <input type="text" id="name" name="name" required>
        </div>
        
        <div class="form-group">
          <label for="scientific">Nome scientifico*</label>
          <input type="text" id="scientific" name="scientific" required>
        </div>

        <div class="form-group">
          <label for="description">Descrizione*</label>
          <textarea id="description" name="description" rows="4" required></textarea>
        </div>
        
        <div class="form-group">
          <label for="category">Categoria</label>
          <select id="category" name="category">
            <option value="">Seleziona...</option>
            <option value="Areacea">Areacea</option>
            <option value="Albero Caducifoglio">Albero Caducifoglio</option>
            <option value="Conifera">Conifera</option>
            <option value="Erbacea Aromatica">Erbacea Aromatica</option>
            <option value="Erbacea Alimentare">Erbacea Alimentare</option>
            <option value="Erbacea Officinale">Erbacea Officinale</option>
            <option value="Arbusto Aromatico">Arbusto Aromatico</option>
            <option value="Albero Sempreverde">Albero Sempreverde</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="image-url">URL Immagine</label>
          <input type="url" id="image-url" name="imageUrl" placeholder="https://esempio.com/immagine.jpg">
          <small>Inserisci il link di un'immagine già online (es: da Unsplash, Imgur, etc.)</small>
        </div>
        
        <button type="submit" class="submit-btn">Invia contributo</button>
        <div id="form-message"></div>
      </form>
    </details>

<script>
  document.getElementById('contribute-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const form = e.target;
    const submitBtn = form.querySelector('.submit-btn');
    const messageDiv = document.getElementById('form-message');
    
    submitBtn.disabled = true;
    submitBtn.textContent = 'Invio in corso...';
    messageDiv.textContent = '';
    messageDiv.className = 'form-message';
    
    const imageUrl = document.getElementById('image-url').value.trim();
    
    // CORREZIONE: i nomi dei campi devono corrispondere a quelli di Airtable (es: "Name" non "title")
    const formData = {
      "Name": document.getElementById('name').value,
      "Scientific": document.getElementById('scientific').value,
      "Description": document.getElementById('description').value,
      "Category": document.getElementById('category').value,
    };
    
    // CORREZIONE: il campo immagine in Airtable si chiama "Photo"
    if (imageUrl) {
      formData.Photo = [{ url: imageUrl }];
    }
    
    try {
      const response = await fetch(`https://api.airtable.com/v0/${import.meta.env.PUBLIC_AIRTABLE_BASE_ID}/${import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${import.meta.env.PUBLIC_AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          records: [{
            fields: formData
          }]
        })
      });
      
      const responseData = await response.json();
      
      if (response.ok) {
        messageDiv.textContent = '✅ Contributo inviato con successo! Ricarica la pagina per vederlo.';
        messageDiv.className = 'form-message success';
        form.reset();
      } else {
        console.error('Errore Airtable:', responseData);
        messageDiv.textContent = `❌ Errore: ${responseData.error?.message || 'Errore sconosciuto'}`;
        messageDiv.className = 'form-message error';
      }
    } catch (error) {
      console.error('Errore generale:', error);
      messageDiv.textContent = '❌ Errore durante l\'invio. Controlla la console.';
      messageDiv.className = 'form-message error';
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Invia contributo';
    }
  });
</script>

</body>
</html>