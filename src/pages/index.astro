---
import MobileLayout from '../layouts/MobileLayout.astro';

// --- DEFINIZIONE DATI ---
// Per risolvere il "ReferenceError", definiamo 'items' qui.
// SOSTITUISCI QUESTO ARRAY con il tuo sistema di recupero dati (es. Astro.glob)
// Assicurati che ogni oggetto abbia una proprietà 'image' con un percorso valido.
const items = [
  { image: '/images/archivio/fiore-01.jpg' },
  { image: '/images/archivio/fiore-02.jpg' },
  { image: '/images/archivio/fiore-03.jpg' },
  { image: '/images/archivio/fiore-04.jpg' },
  // Aggiungi quante immagini vuoi...
];

// Controlla se 'items' è un array (buona prassi)
if (!Array.isArray(items)) {
  console.error("ERRORE: 'items' non è un array. Controlla il recupero dati.");
}

const imageInterval = 100; // Intervallo in millisecondi
---

<MobileLayout>
  <div class="landing-wrapper">

    {items.length > 0 ? (
      <div class="rapid-sequence-background">
        {items.map((item, index) => (
            <img
                src={item.image}
                alt="Immagine dall'archivio botanico"
                class:list={["background-image", { "is-visible": index === 0 }]}
            />
        ))}
      </div>
    ) : (
      <div class="rapid-sequence-background">
        <p class="error-message">Nessuna immagine trovata nell'archivio.</p>
      </div>
    )}

    <div class="overlay-content">
      <a href="/" class="top-left-title">GBA</a>
      <a href="/scanner" class="middle-left-link">Plants Scanner</a>
      <a href="/personale" class="middle-right-link">Your Collection</a>
    </div>

  </div>
</MobileLayout>

<style>
  /* Contenitore principale che riempie il MobileLayout */
  .landing-wrapper {
    position: relative;
    width: 100%;
    height: 100%; /* Occupa il 100% dell'altezza del layout */
    overflow: hidden;
    background-color: #000; /* Sfondo nero se le immagini non caricano */
  }

  /* Contenitore per le immagini di sfondo */
  .rapid-sequence-background {
    position: absolute;
    inset: 0; /* top/right/bottom/left: 0 */
    z-index: 1;
  }
  .background-image {
    position: absolute;
    inset: 0;
    width: 100%; 
    height: 100%;
    object-fit: cover; /* Copre tutto lo spazio senza distorcere */
    opacity: 0;
    transition: none; /* Nessuna transizione per l'effetto rapido */
  }
  .background-image.is-visible { 
    opacity: 1; 
  }

  /* Messaggio di errore fallback */
  .error-message {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #555;
    font-family: sans-serif;
  }

  /* Contenitore per i testi sovrapposti */
  .overlay-content {
    position: absolute;
    inset: 0;
    z-index: 2; /* Sta sopra lo sfondo */
    color: white;
    font-family: monospace;
    
  }

  /* Stile comune per i link sovrapposti */
  .overlay-content a {
    color: inherit;
    text-decoration: none;
    position: absolute; /* Chiave per il posizionamento libero */
    text-transform: uppercase;
    font-weight: 600;
    font-size: 0.9rem;
  
  }

  /* Link "GBA" in alto a sinistra */
  .top-left-title {
    top: 2.5rem;
    left: 1.5rem;
    font-size: 1.1rem;
    font-weight: 700;
  }

  /* Link "PLANTS SCANNER" a sinistra, a metà altezza */
  .middle-left-link {
    top: 50%;
    left: 1.5rem;
    transform: translateY(-50%); /* Centra verticalmente */
  }

  /* Link "YOUR COLLECTION" a destra, a metà altezza */
  .middle-right-link {
    top: 50%;
    right: 1.5rem;
    transform: translateY(-50%); /* Centra verticalmente */
    text-align: right;
  }
</style>

<script define:vars={{ imageInterval }}>
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.background-image');
    
    // Non fare nulla se c'è 1 sola immagine o nessuna
    if (images.length < 2) return; 
    
    let currentIndex = 0;
    
    // Assicurati che imageInterval sia un numero valido
    const intervalTime = typeof imageInterval === 'number' ? imageInterval : 100;

    setInterval(() => {
      // Bonus: Mette in pausa l'animazione se la finestra non è attiva
      if (document.hidden) return; 
      
      // Nasconde l'immagine corrente
      images[currentIndex].classList.remove('is-visible');
      
      // Calcola la prossima immagine (tornando a 0 se è l'ultima)
      currentIndex = (currentIndex + 1) % images.length;
      
      // Mostra la nuova immagine
      images[currentIndex].classList.add('is-visible');

    }, intervalTime);
  });
</script>