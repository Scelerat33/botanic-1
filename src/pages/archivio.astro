---
// --- Logica Airtable e definizioni ---
import Airtable from 'airtable';
import { ViewTransitions } from 'astro:transitions';

const base = new Airtable({
  apiKey: import.meta.env.PUBLIC_AIRTABLE_API_KEY
}).base(import.meta.env.PUBLIC_AIRTABLE_BASE_ID);

let items = [];
try {
  const records = await base(import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME)
    .select({ maxRecords: 14 }) // Limite per test
    .all();

  items = records.map(record => ({
    // Mappatura completa dei campi da Airtable
    id: record.id,
    nome: record.fields.nome,
    scientific: record.fields.scientific,
    family_apg: record.fields.family_apg,
    cronquist: record.fields.cronquist,
    class: record.fields.class,
    s_class: record.fields.s_class,
    order: record.fields.order,
    family: record.fields.family,
    tribu: record.fields.tribu,
    genere: record.fields.genere,
    category: record.fields.category,
    biological: record.fields.biological,
    description: record.fields.description,
    photo_macro: record.fields.photo_macro?.[0]?.url,
  }));
  items.sort((a, b) => {
    const nameA = a.nome || a.scientific || '';
    const nameB = b.nome || a.scientific || '';
    return nameA.localeCompare(nameB);
  });

} catch (error) {
  console.error('Errore caricamento dati:', error);
}

const titolo = "Il mio archivio";
const itemCount = items.length;
// Nomi colonne per header lista e mobile labels
const headerColumns = [
    { key: 'id', abbr: "N.", full: "Numero" },
    { key: 'nome', abbr: "NOME", full: "Nome Comune" },
    { key: 'scientific', abbr: "SCIENTIFIC", full: "Nome Scientifico" },
    { key: 'family_apg', abbr: "FAMILY", full: "Famiglia" },
    { key: 'class', abbr: "CLASS", full: "Classe" },
    { key: 'genere', abbr: "GENERE", full: "Genere" }
];
// --- ORDINE E CHIAVI CAMPI POPUP con GridArea basato sul tuo schema ---
const popupDetailsData = [
    { key: 'nome', label: 'Nome', gridArea: 'nome-area' },
    { key: 'scientific', label: 'Scientific', gridArea: 'sci-area' },
    { key: 'family_apg', label: 'Family_APG', gridArea: 'fam-apg' },
    { key: 'cronquist', label: 'Cronquist', gridArea: 'cronq' },
    { key: 'class', label: 'Class', gridArea: 'classe' },
    { key: 's_class', label: 'S_Class', gridArea: 'sottoclasse' },
    { key: 'order', label: 'Order', gridArea: 'ordine' },
    { key: 'tribu', label: 'Tribu', gridArea: 'tribu' },
    { key: 'genere', label: 'Genere', gridArea: 'genere-area' },
    { key: 'category', label: 'Category', gridArea: 'categoria' },
    { key: 'biological', label: 'Biological', gridArea: 'bio' },
    { key: 'description', label: 'Description', gridArea: 'desc' },
];
---

<html lang="it">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Astro</title>

        <ViewTransitions />

        <style>
            /* --- VARIABILI CSS PER BOX DETTAGLI POPUP --- */
            :root {
                /* ----- PERSONALIZZAZIONE BOX DETTAGLI ----- */
                /* MODIFICA padding verticale/orizzontale box */
                --detail-box-padding: 0.4rem 0.8rem; /* Ridotto padding verticale */
                /* MODIFICA gap ORIZZONTALE tra colonne */
                --detail-column-gap: 1.5rem;
                /* NUOVA VARIABILE: MODIFICA gap VERTICALE tra righe CON CONTENUTO */
                --detail-row-gap: 10px; /* Valore piccolo per avvicinare */
                /* NUOVA VARIABILE: MODIFICA spazio verticale AGGIUNTIVO (simula righe vuote) */
                --detail-empty-row-space: 0px; /* Spazio aggiunto sopra specifici box */

                /* FONT ETICHETTA (es. "NOME:") - Medium */
                /* Cambia qui font-family, font-weight, font-size, etc. */
                --detail-label-font-family: 'Monument Grotesk Trial', sans-serif;
                --detail-label-font-weight: 500;
                --detail-label-font-size: 0.9rem;
                --detail-label-color-light: #000000;
                --detail-label-color-dark: #ffffff;
                --detail-label-transform: none;
                --detail-label-spacing: 0.02em;

                /* FONT VALORE (es. "Acer campestre") - Mono */
                /* Cambia qui font-family, font-weight, font-size, etc. */
                --detail-value-font-family: 'Monument Grotesk Mono Trial', monospace;
                --detail-value-font-weight: 500;
                --detail-value-font-size: 0.95rem;
                --detail-value-color-light: #000;
                --detail-value-color-dark: #fff;
            }

            /* --- FONT DEFINITIONS (Invariato) --- */
            @font-face { font-family: 'Monument Grotesk Trial'; src: url('/src/asset/type/ABCMonumentGrotesk-Medium-Trial.otf') format('opentype'); font-weight: 500; font-style: normal; }
            @font-face { font-family: 'Monument Grotesk Trial Bold'; src: url('/src/asset/type/ABCMonumentGrotesk-Bold-Trial.otf') format('opentype'); font-weight: 700; font-style: normal; }
            @font-face { font-family: 'Monument Grotesk Mono Trial'; src: url('/src/asset/type/ABCMonumentGroteskMono-Regular-Trial.otf') format('opentype'); font-weight: 500; font-style: normal; }

            /* --- STILI BASE (Invariato) --- */
            body { padding-top: 50px; margin: 0; background-color: #fff; color: #000000; -ms-overflow-style: none; scrollbar-width: none; display: flex; flex-direction: column; min-height: 100vh; font-family: 'Monument Grotesk Trial', sans-serif; }
            body::-webkit-scrollbar { display: none; }
            body.popup-open { overflow: hidden; }

            /* --- HEADER (Invariato) --- */
            .main-header { position: fixed; top: 0; left: 0; width: 100%; z-index: 1000; display: flex; justify-content: space-between; align-items: center; box-sizing: border-box; background-color: #fff; color: #000; padding: 10px 20px; }
            .main-header .logo { font-family: 'Monument Grotesk Trial', sans-serif; font-size: 10pt; font-weight: 500; }
            .header-controls-center, .header-controls-right { display: flex; align-items: center; gap: 20px; }
            .header-control { background: transparent; border: none; cursor: pointer; padding: 0; margin: 0; display: flex; align-items: center; font-family: 'Monument Grotesk Mono Trial', monospace; font-size: 10pt; font-weight: 500; color: #000; text-decoration: none; position: relative; z-index: 1; transition: color 0.3s ease; }
            .header-control:hover { opacity: 1; }
            .header-control .text-content-wrapper { display: flex; align-items: center; gap: 6px; padding: 0 4px; position: relative; z-index: 2; }
            .header-control .text-content-wrapper::after { content: ''; position: absolute; bottom: 0; left: 0; width: 0; height: 100%; background-color: transparent; transition: width 0.3s ease, background-color 0.3s ease; z-index: -1; }
            .header-control:hover .text-content-wrapper::after { width: 100%; background-color: #000; }
            .header-control:hover .text-content-wrapper { color: #fff; }
            .header-control:hover .text-content-wrapper::before { border-color: #fff; }
            .header-control:hover .text-content-wrapper.active::before { background-color: #fff; }
            .header-control:hover .text-content-wrapper:not(.active)::before { border-color: #fff; }
            .header-control .text-content-wrapper.has-indicator::before { content: ''; display: inline-block; width: 10px; height: 10px; border-radius: 50%; border: 1px solid #000; background-color: transparent; }
            .header-control .text-content-wrapper.active::before { background-color: #000; border-color: #000; }

            /* --- TICKER E FOOTER (Invariati) --- */
            @keyframes scroll { 0% { transform: translateX(0); } 100% { transform: translateX(-50%); } }
            .ticker-wrap { width: 100%; overflow: hidden; background-color: #fff; color: #000; margin: 0; transition: background-color 0.0s, color 0s; }
            .ticker-content { display: flex; width: fit-content; white-space: nowrap; animation: scroll 400s linear infinite; }
            .ticker-content > div { display: flex; flex-shrink: 0; }
            .ticker-content span { display: inline-block; font-family: 'Monument Grotesk Trial Bold', sans-serif; font-size:20rem; padding: 1px 0; margin-right: 40px; }
            footer { width: 100%; box-sizing: border-box; margin-top: 1rem; background-color: #ffffff; color: #000; }
            .footer-content { display: flex; align-items: flex-start; gap: 2rem; padding: 20px; }
            .footer-logo { margin: 0; font-family: 'Monument Grotesk Trial', sans-serif; font-size: 10rem; font-weight: 500; line-height: 0.8; }
            .footer-description { margin: 0; font-family: 'Monument Grotesk Trial', sans-serif; font-size: 15pt; font-weight: 500; line-height: 1.2; max-width: 1450px; }

            /* --- DARK MODE (Invariato) --- */
            html.dark-mode body { background-color: #000000; color: #FFFFFF; }
            html.dark-mode .main-header { background-color: #000; color: #fff; }
            html.dark-mode .header-control { color: #fff; }
            html.dark-mode .header-control .text-content-wrapper.has-indicator::before { border-color: #fff; }
            html.dark-mode .header-control .text-content-wrapper.active::before { background-color: #fff; border-color: #fff; }
            html.dark-mode .header-control:hover .text-content-wrapper::after { background-color: #fff; }
            html.dark-mode .header-control:hover .text-content-wrapper { color: #000; }
            html.dark-mode .header-control:hover .text-content-wrapper::before { border-color: #000; }
            html.dark-mode .header-control:hover .text-content-wrapper.active::before { background-color: #000; }
            html.dark-mode .header-control:hover .text-content-wrapper:not(.active)::before { border-color: #000; }
            html.dark-mode .header-control#header-btn-theme .text-content-wrapper::before { background-color: #fff; border-color: #fff; }
            html.dark-mode .ticker-wrap { background-color: #000; color: #fff; }
            html.dark-mode footer { background-color: #000; color: #fff; }

            /* --- VISTA "GRID" (Invariato, con crocini) --- */
            a.card-link { text-decoration: none; color: inherit; cursor: pointer; }
            .grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 2rem; flex-grow: 1; padding: 0 20px; box-sizing: border-box; }
            .grid .card { border: none; border-radius: 0px; box-shadow: none; text-align: left; display: flex; flex-direction: column; height: 100%; background-color: transparent; margin-bottom: 4rem; position: relative; }
            .card-content-grid { padding: 0.8rem 0; font-family: 'Monument Grotesk Trial', sans-serif; display: flex; flex-direction: column; position: relative; }
            .card-content-grid span { font-size: 0.9rem; display: block; line-height: 1.1; }
            .card-content-grid .nome, .card-content-grid .scientific, .card-content-grid .family { font-weight: 700; color: #000; }
            .card-content-grid .numbering { font-family: 'Monument Grotesk Mono Trial', monospace; font-weight: 700; color: #000; margin-bottom: 1rem; }
            .card-image-grid { width: 100%; aspect-ratio: 1 / 1; object-fit: cover; display: block; position: relative; }
            html.dark-mode .grid:not(.elenco) .card-content-grid .scientific, html.dark-mode .grid:not(.elenco) .card-content-grid .family, html.dark-mode .grid:not(.elenco) .card-content-grid .numbering { color: #ffffff; }
            html.dark-mode .grid:not(.elenco) .card-content-grid .nome { color: #fff; }
            .grid:not(.elenco) .card-content-archive { display: none; }
            .grid:not(.elenco) .card-content-grid::before, .grid:not(.elenco) .card-content-grid::after, .grid:not(.elenco) .card-image-grid::before, .grid:not(.elenco) .card-image-grid::after { content: ''; position: absolute; width: 12px; height: 12px; z-index: 5; background: linear-gradient(to bottom, #000, #000) no-repeat center/1px 100%, linear-gradient(to right, #000, #000) no-repeat center/100% 1px; transition: background 0.3s ease; }
            .grid:not(.elenco) .card-content-grid::before { top: -6px; left: -6px; }
            .grid:not(.elenco) .card-content-grid::after { top: -6px; right: -6px; }
            .grid:not(.elenco) .card-image-grid::before { bottom: -6px; left: -6px; }
            .grid:not(.elenco) .card-image-grid::after { bottom: -6px; right: -6px; }
            html.dark-mode .grid:not(.elenco) .card-content-grid::before, html.dark-mode .grid:not(.elenco) .card-content-grid::after, html.dark-mode .grid:not(.elenco) .card-image-grid::before, html.dark-mode .grid:not(.elenco) .card-image-grid::after { background: linear-gradient(to bottom, #fff, #fff) no-repeat center/1px 100%, linear-gradient(to right, #fff, #fff) no-repeat center/100% 1px; }

            /* ======================================================= */
            /* --- STILI VISTA "ARCHIVE" (classe .elenco - Ripristinati) --- */
            /* ======================================================= */
            .archive-layout, .grid.elenco .card-content-archive { display: grid; grid-template-columns: 0.3fr 1.2fr 1.5fr 1fr 1fr 1fr; gap: 1.5rem; width: 100%; box-sizing: border-box; padding-left: 20px; padding-right: 20px; align-items: baseline; }
            #archive-header { display: none; font-family: 'Monument Grotesk Mono Trial', monospace; font-weight: 500; font-size: 0.8rem; text-transform: uppercase; color: #000; padding-top: 0.8rem; padding-bottom: 0.8rem; position: sticky; top: 50px; background-color: #fff; z-index: 900; border-bottom: 1px solid #eee; }
            html.dark-mode #archive-header { background-color: #000; border-bottom-color: #000000; color: #fff; }
            .archive-header-item { padding: 0 4px; vertical-align: baseline; }
            .archive-header-item span { display: inline-block; }
            .grid.elenco { grid-template-columns: 1fr; gap: 0; padding-left: 0; padding-right: 0; }
            .grid.elenco a.card-link { position: relative; display: block; padding-left: 20px; padding-right: 20px; border-bottom: 1px solid #eee; transition: background-color 0.2s ease; }
            .grid.elenco a.card-link:hover { background-color: rgba(0,0,0,0.03); }
            html.dark-mode .grid.elenco a.card-link { border-bottom-color: #333; }
            html.dark-mode .grid.elenco a.card-link:hover { background-color: rgba(255,255,255,0.05); }
            .grid.elenco a.card-link:last-child { border-bottom: none; }
            .grid.elenco .card { display: none; }
            .grid.elenco .card-content-archive { display: grid; font-family: 'Monument Grotesk Trial', sans-serif; font-size: 1rem; padding-top: 0.8rem; padding-bottom: 0.8rem; }
            .grid.elenco .card-content-archive span { font-weight: 500; color: #000; line-height: 1.2; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
            html.dark-mode .grid.elenco .card-content-archive span { color: #fff; }
            .image-preview { position: fixed; width: 300px; height: 300px; z-index: 1010; opacity: 0; pointer-events: none; transition: opacity 0.2s ease-out; will-change: top, left, opacity; box-shadow: 0 5px 15px rgba(0,0,0,0.3); }
            .image-preview img { display: block; width: 100%; height: 100%; object-fit: cover; }
            .image-preview.visible { opacity: 1; }
            @media (max-width: 1200px) { .grid:not(.elenco) { grid-template-columns: repeat(3, 1fr); } .archive-layout, .grid.elenco .card-content-archive { gap: 1rem; } }
            @media (max-width: 800px) { .grid:not(.elenco) { grid-template-columns: repeat(2, 1fr); } .footer-content { flex-direction: column; gap: 1.5rem; } .archive-layout, .grid.elenco .card-content-archive { grid-template-columns: 0.4fr 1fr 1.3fr 1fr 0.8fr 0.8fr; gap: 0.8rem; padding-left: 10px; padding-right: 10px; } .grid.elenco a.card-link { padding-left: 10px; padding-right: 10px; } .image-preview { display: none !important; } }
            @media (max-width: 500px) { .grid:not(.elenco) { grid-template-columns: 1fr; padding: 0 0px; } .main-header { padding: 10px; } #archive-header { display: none !important; } .grid.elenco { padding: 0; } .grid.elenco a.card-link { padding: 0 10px; display: block; border-bottom: 1px solid #444; background-color: transparent !important; } .grid.elenco a.card-link:last-child { border-bottom: none; } .grid.elenco .card-content-archive { display: flex; flex-direction: column; gap: 0.4rem; padding: 0.8rem 0; align-items: flex-start; grid-template-columns: none; align-items: initial; } .grid.elenco .card-content-archive span { white-space: normal; width: 100%; padding: 0.25rem 0.5rem; box-sizing: border-box; position: relative; z-index: 1; line-height: 1.4; display: block; overflow: visible; text-overflow: clip; background-color: #000; color: #fff; } .grid.elenco .card-content-archive span::before { content: attr(data-label) ": "; font-weight: bold; margin-right: 0.5em; display: inline; color: #aaa; } html.dark-mode .grid.elenco .card-content-archive span { background-color: #fff; color: #000; } html.dark-mode .grid.elenco .card-content-archive span::before { color: #555; } }

            /* ======================================================= */
            /* --- STILI POPUP (Aggiornati con Margini per Spaziatura) --- */
            /* ======================================================= */
            #plant-popup-overlay {
                position: fixed;
                top: 38.5px; left: 0; width: 100vw;
                height: calc(100vh);
                background-color: rgb(0, 0, 0);
                z-index: 1050; display: none; opacity: 0;
                transition: opacity 0.3s ease-in-out;
                overflow: hidden;
            }
             #plant-popup-overlay.is-visible { display: block; opacity: 1; }

            #plant-popup {
                position: absolute; top: 0; left: 0;
                width: 100%; height: 100%;
                background-color: #fff; color: #000;
                z-index: 1051; overflow: hidden;
                opacity: 0; transition: opacity 0.3s ease-in-out;
                display: none; flex-direction: column;
            }
             #plant-popup-overlay.is-visible #plant-popup { display: flex; opacity: 1; }
             html.dark-mode #plant-popup { background-color: #000000; color: #fff; }

             /* Header popup (stretto) */
             .popup-header { display: flex; justify-content: flex-end; align-items: center; padding: 0.2rem 1rem; border-bottom: 1px solid rgba(0, 0, 0, 0); background-color: inherit; z-index: 10; flex-shrink: 0; }
             html.dark-mode .popup-header { border-bottom-color: #00000000; }
             #popup-close-button { background: none; border: none; font-size: 1.8rem; line-height: 1; cursor: pointer; color: #000; /* Icona Nera */ padding: 0.4rem; transition: color 0.2s; }
             html.dark-mode #popup-close-button { color: #fff; /* Icona Bianca */ }
             #popup-close-button:hover { color: #000000; }
             html.dark-mode #popup-close-button:hover { color: #ffffff; }

            /* Contenuto principale (Scrollabile) */
             .popup-main-content { flex-grow: 1; display: flex; overflow-y: auto; }

             /* Colonna Immagine (Sinistra, tutta altezza, attaccata) */
             .popup-image-container { flex: 0 0 50%; height: 100%; position: sticky; top: 0; padding: 0; align-self: flex-start; overflow: hidden; }
             .popup-image-container img { display: block; width: 100%; height: 100%; object-fit: cover; object-position: center; }

             /* Colonna Testo (Destra, con Grid Areas e Margini) */
             .popup-text-container {
                 flex: 1 1 50%;
                 padding: 2rem;
                 display: grid;
                 grid-template-columns: repeat(3, 10fr);
                 /* Altezza riga automatica basata sul contenuto */
                 grid-auto-rows: min-content;
                 /* Usa solo row-gap piccolo tra tutte le righe */
                 row-gap: var(--detail-row-gap, 0.1rem);
                 column-gap: var(--detail-column-gap, 1.5rem);

                 /* ----- MAPPA DELLE AREE GRID (Definisce solo la struttura) ----- */
                 grid-template-areas:
                     "nome-area  .          fam-apg"
                     "sci-area   sci-area           ."
                     ".          .          ."   
                     ".          .          ."   
                     ".          .          ." 
                     ".          .          ."   
                     ".          .          ."   
                     ".          .          ."   
                     "cronq      .          ."
                     "classe     sottoclasse ordine"
                     "tribu      .          ."
                    ".          .          ."   
                     ".          .          ."   
                     ".          .          ." 
                     ".          .          ."   
                     ".          .          ."   
                     ".          .          ."   
                    ".          .          ."   
                     ".          .          ."   
                     ".          .          ." 
                     ".          .          ."   
                     ".          .          ."   
                     ".          .          ."   
                     ".          .          ."   /* Riga 9 (Spazio vuoto logico) */
                     "genere-area categoria   categoria"
                     ". bio        bio"
                     ".          .          ."   /* Riga 12 (Spazio vuoto logico) */
                    ".          .          ."   
                     ".          .          ."   
                     ".          .          ." 
                     ".          .          ."   
                     ".          .          ."   /* Riga 12 (Spazio vuoto logico) */
                    ".          .          ."   
                     ".          .          ."   
                     ".          .          ." 
                     ".          .          ."   
                     ".          .          ."   
                     ".          .          ."   
                    ".          .          ."   
                     ".          .          ."   
                     "desc       desc       desc";
                 /* ----- FINE MAPPA ----- */
             }

             /* Box singolo dettaglio */
             .popup-text-container > span {
                 display: block;
                 background-color: var(--detail-box-bg-light);
                 padding: var(--detail-box-padding);
                 box-sizing: border-box;
                 /* Rimosso min-height */
             }
              html.dark-mode .popup-text-container > span {
                 background-color: var(--detail-box-bg-dark);
             }

             /* --- AGGIUNTA MARGINI PER SIMULARE RIGHE VUOTE --- */
             /* Selettori basati sui data-key assegnati da JS */
             /* Modifica/aggiungi/rimuovi questi margini per controllare lo spazio verticale */

             /* Spazio sopra Cronquist (riga 6), simulando righe 3,4,5 vuote */
             .popup-text-container > span[data-key="cronquist"] { margin-top: var(--detail-empty-row-space, 1.5em); }

             /* Spazio sopra Tribu (riga 8), simulando riga 9 vuota */
             .popup-text-container > span[data-key="tribu"] { margin-top: var(--detail-empty-row-space, 1.5em); }
             /* Spazio tra Classe/Sottoclasse/Ordine (riga 7) e Tribu (riga 8) = row-gap piccolo */

             /* Spazio sopra Genere (riga 10) */
              /* Non serve margine extra qui se riga 9 è solo logica */

             /* Spazio sopra Category/Biological (riga 11) */
             /* Non serve margine extra qui */

             /* Spazio sopra Description (riga 13), simulando riga 12 vuota */
             .popup-text-container > span[data-key="description"] { margin-top: var(--detail-empty-row-space, 1.5em); }

             /* --- FINE AGGIUNTA MARGINI --- */


             /* Etichetta dentro il box (Font Medium) */
             .popup-text-container strong {
                 font-family: var(--detail-label-font-family);
                 font-weight: var(--detail-label-font-weight);
                 font-size: var(--detail-label-font-size);
                 color: var(--detail-label-color-light);
                 display: block; margin-bottom: 0.2em;
                 text-transform: var(--detail-label-transform);
                 letter-spacing: var(--detail-label-spacing);
             }
              html.dark-mode .popup-text-container strong { color: var(--detail-label-color-dark); }

              /* Valore dentro il box (Font Mono) */
              .popup-text-container .detail-value {
                  font-family: var(--detail-value-font-family);
                  font-weight: var(--detail-value-font-weight);
                  font-size: var(--detail-value-font-size);
                  color: var(--detail-value-color-light);
                  display: block; white-space: normal; word-break: break-word;
              }
               html.dark-mode .popup-text-container .detail-value { color: var(--detail-value-color-dark); }


             /* Responsive per il popup */
             @media (max-width: 700px) {
                 .popup-main-content { flex-direction: column; padding: 1rem; gap: 1rem; }
                 .popup-image-container { position: static; flex-basis: auto; max-height: 40vh; align-self: stretch; height: auto; width: 100%; }
                 .popup-image-container img { max-height: 100%; object-fit: cover; }
                 .popup-text-container {
                     flex-basis: auto; padding: 1rem;
                     display: flex; /* Torna a flex column su mobile */
                     flex-direction: column;
                     gap: 0.5rem; /* Gap tra box */
                     grid-template-areas: none !important;
                     grid-template-columns: none !important;
                     grid-auto-rows: auto;
                 }
                 /* Rimuovi grid area e margini specifici dagli span su mobile */
                 .popup-text-container > span {
                      grid-area: auto !important;
                      min-height: auto;
                      margin-top: 0 !important; /* Resetta margini */
                  }
                 #plant-popup { height: auto; max-height: calc(100vh - 50px - 2rem); top: calc(50px + 1rem); bottom: 1rem; left: 1rem; right: 1rem; width: auto; border-radius: 5px; box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3); }
                 #plant-popup-overlay { background-color: rgba(0, 0, 0, 0.5); }
             }
            /* ======================================================= */
            /* --- FINE STILI POPUP --- */
            /* ======================================================= */

        </style>
    </head>
    <body>
        <header class="main-header" transition:persist>
             <div class="logo" transition:name="logo-gba"> GBA </div>
              <div class="header-controls-center"> <button id="header-btn-griglia" class="header-control" title="Vista Griglia"> <span class="text-content-wrapper has-indicator"> GRID </span> </button> <button id="header-btn-elenco" class="header-control" title="Vista Elenco"> <span class="text-content-wrapper has-indicator"> ARCHIVE </span> </button> </div>
             <div class="header-controls-right"> <button id="header-btn-theme" class="header-control" title="Cambia Tema"> <span class="text-content-wrapper has-indicator" id="theme-label-wrapper"> <span id="theme-label">LIGHT</span> </span> </button> <a href="/personale" class="header-control" title="Personale"> <span class="text-content-wrapper"> ACCOUNT </span> </a> </div>
        </header>

        <div class="ticker-wrap">{/* ... ticker ... */}</div>
        <div class="header-archivio"></div>

        {/* Header Lista: No Hover */}
        <div id="archive-header" class="archive-layout">
            {headerColumns.map(col => (
                <span class="archive-header-item">
                    <span>{col.abbr}</span>
                </span>
            ))}
        </div>

        {/* Contenitore Grid/Lista */}
        <div class="grid" id="items-container">
            {items.map((item, index) => (
                // --- Link modificato per popup ---
                <a class="card-link js-open-popup" data-id={item.id} data-image-preview={item.photo_macro || ''} href="#" onclick="return false;">

                    {/* Contenuto Lista: aggiornato con Genere */}
                     <div class="card-content-archive">
                         <span data-label={headerColumns[0].abbr}>{index + 1}</span>
                         <span data-label={headerColumns[1].abbr}>{item.nome || 'N/D'}</span>
                         <span data-label={headerColumns[2].abbr}>{item.scientific || 'N/D'}</span>
                         <span data-label={headerColumns[3].abbr}>{item.family_apg || 'N/D'}</span>
                         <span data-label={headerColumns[4].abbr}>{item.class || 'N/D'}</span>
                         <span data-label={headerColumns[5].abbr}>{item.genere || 'N/D'}</span>
                     </div>

                    {/* Contenuto Grid originale (nascosto in modalità lista) */}
                    <div class="card">
                        <div class="card-content-grid">
                            <span class="numbering">{index + 1} / {itemCount}</span>
                            {item.nome && <span class="nome">{item.nome}</span>}
                            {item.scientific && <span class="scientific">{item.scientific}</span>}
                            {item.family_apg && <span class="family">{item.family_apg}</span>}
                        </div>
                        {item.photo_macro && (
                            <img class="card-image-grid" src={item.photo_macro} alt={item.nome || item.scientific} loading="lazy" />
                        )}
                    </div>
                </a>
            ))}
        </div>

         {/* --- Elemento unico per la preview dell'immagine --- */}
         <div id="image-preview-container" class="image-preview">
             <img id="image-preview-img" src="" alt="Anteprima immagine" />
         </div>

          {/* ======================================================= */}
          {/* --- Struttura HTML per il Popup (Semplificata) --- */}
          {/* ======================================================= */}
          <div id="plant-popup-overlay">
              <div id="plant-popup" aria-modal="true" role="dialog">
                   {/* Header Popup (solo bottone chiudi) */}
                   <div class="popup-header">
                       <button id="popup-close-button" aria-label="Chiudi popup">&times;</button>
                   </div>
                   {/* Contenuto Principale Popup (scrollabile) */}
                   <div class="popup-main-content">
                        {/* Colonna Sinistra Immagine */}
                        <div class="popup-image-container">
                            <img id="popup-image" src="" alt="" />
                        </div>
                        {/* Colonna Destra Testo (ora usa Grid Areas) */}
                        <div id="popup-details" class="popup-text-container"> {/* ID spostato qui */}
                             {/* Box generati da JS con stile grid-area e data-key */}
                        </div>
                   </div>
              </div>
          </div>
          {/* ======================================================= */}
          {/* --- FINE STRUTTURA POPUP --- */}
          {/* ======================================================= */}

        <footer>
             <div class="footer-content">
                <p class="footer-logo">GBA</p>
                <p class="footer-description">
                    Questo archivio botanico digitale costituisce una risorsa specializzata per la catalogazione e la consultazione tassonomica. <br>
                    Il database comprende schede informative dettagliate relative a oltre 500 piante, classificate rigorosamente secondo le rispettive specie e famiglie. L'obiettivo di questa collezione è fornire uno strumento scientifico per lo studio della biodiversità vegetale, supportando la ricerca e la didattica.
                    <br>
                     ©2025
                </p>
            </div>
        </footer>

        {/* --- SCRIPT (Invariato rispetto all'ultima versione) --- */}
        <script define:vars={{ titolo, itemCount, popupDetailsData }}>
            console.log("Titolo Pagina:", titolo);
            console.log("Elementi Trovati:", itemCount);

            // --- Funzione UI Header ---
            function initializePageUI() {
                const btnGriglia = document.getElementById('header-btn-griglia');
                const btnElenco = document.getElementById('header-btn-elenco');
                const container = document.getElementById('items-container');
                const btnTheme = document.getElementById('header-btn-theme');
                const themeLabel = document.getElementById('theme-label');
                const themeLabelWrapper = document.getElementById('theme-label-wrapper');
                const overlay = document.getElementById('plant-popup-overlay');

                if (!btnGriglia || !container || !btnTheme) { return; }

                const grigliaWrapper = btnGriglia.querySelector('.text-content-wrapper');
                const elencoWrapper = btnElenco.querySelector('.text-content-wrapper');
                const archiveHeader = document.getElementById('archive-header');

                document.documentElement.classList.remove('light-mode');
                document.documentElement.classList.add('dark-mode');
                localStorage.setItem('theme', 'dark');

                btnGriglia.onclick = () => { container.classList.remove('elenco'); grigliaWrapper.classList.add('active'); elencoWrapper.classList.remove('active'); archiveHeader.style.display = 'none'; overlay.classList.remove('is-visible'); document.body.classList.remove('popup-open'); };
                btnElenco.onclick = () => { container.classList.add('elenco'); elencoWrapper.classList.add('active'); grigliaWrapper.classList.remove('active'); archiveHeader.style.display = 'grid'; overlay.classList.remove('is-visible'); document.body.classList.remove('popup-open');};

                function updateThemeButtonText() { const isDark = document.documentElement.classList.contains('dark-mode'); themeLabel.textContent = isDark ? 'DARK' : 'LIGHT'; if (isDark) { themeLabelWrapper.classList.add('active'); } else { themeLabelWrapper.classList.remove('active'); } }
                btnTheme.onclick = () => { document.documentElement.classList.toggle('dark-mode'); const isDarkNow = document.documentElement.classList.contains('dark-mode'); localStorage.setItem('theme', isDarkNow ? 'dark' : 'light'); updateThemeButtonText(); };

                updateThemeButtonText();
                if (!container.classList.contains('elenco')) { grigliaWrapper.classList.add('active'); elencoWrapper.classList.remove('active'); archiveHeader.style.display = 'none'; }
                else { elencoWrapper.classList.add('active'); grigliaWrapper.classList.remove('active'); archiveHeader.style.display = 'grid'; }
            }

            // --- Logica Preview Immagine ---
            function initializeImagePreview() {
                 const container = document.getElementById('items-container');
                const previewContainer = document.getElementById('image-preview-container');
                const previewImg = document.getElementById('image-preview-img');
                if (!container || !previewContainer || !previewImg) return;
                const isTouch = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (window.innerWidth <= 800);
                if (isTouch) return;
                let currentTargetLink = null, mouseX = 0, mouseY = 0, isHovering = false, frameId = null;
                function updatePos() { if (isHovering && previewContainer.classList.contains('visible')) { const offset = 15, w = window.innerWidth, h = window.innerHeight, pw = previewContainer.offsetWidth, ph = previewContainer.offsetHeight; let x = mouseX + offset, y = mouseY + offset; if (x + pw > w) x = mouseX - offset - pw; if (y + ph > h) y = mouseY - offset - ph; if (x < 0) x = offset; if (y < 0) y = offset; previewContainer.style.left = `${x}px`; previewContainer.style.top = `${y}px`; frameId = requestAnimationFrame(updatePos); } else { cancelAnimationFrame(frameId); frameId = null; } }
                container.addEventListener('mouseover', e => { if (!container.classList.contains('elenco')) return; const link = e.target.closest('a.card-link'); if (link && link !== currentTargetLink) { currentTargetLink = link; isHovering = true; const imgUrl = link.dataset.imagePreview; if (imgUrl) { previewImg.src = imgUrl; previewContainer.classList.add('visible'); mouseX = e.clientX; mouseY = e.clientY; if (!frameId) frameId = requestAnimationFrame(updatePos); } else { previewContainer.classList.remove('visible'); isHovering = false; } } });
                container.addEventListener('mousemove', e => { if (!container.classList.contains('elenco')) return; mouseX = e.clientX; mouseY = e.clientY; });
                container.addEventListener('mouseout', e => { if (!container.classList.contains('elenco')) return; const link = e.target.closest('a.card-link'); const relatedInside = currentTargetLink && e.relatedTarget && currentTargetLink.contains(e.relatedTarget); if (currentTargetLink && currentTargetLink.contains(e.target) && !relatedInside) { previewContainer.classList.remove('visible'); isHovering = false; currentTargetLink = null; } else if (currentTargetLink && !container.contains(e.relatedTarget)) { previewContainer.classList.remove('visible'); isHovering = false; currentTargetLink = null; } });
            }

            // --- Logica Popup (aggiornata per Margini e Stile Uniforme) ---
            function initializePopup() {
                const container = document.getElementById('items-container');
                const overlay = document.getElementById('plant-popup-overlay');
                const popup = document.getElementById('plant-popup');
                const closeButton = document.getElementById('popup-close-button');
                const imageEl = document.getElementById('popup-image');
                const imageContainerEl = document.querySelector('.popup-image-container');
                const detailsEl = document.getElementById('popup-details'); // Contenitore per TUTTI i box

                if (!container || !overlay || !popup || !closeButton || !detailsEl) {
                    console.warn("Elementi del popup non trovati.");
                    return;
                }

                async function openPopup(plantId) {
                    // Pulisci subito
                    imageContainerEl.style.display = 'none'; imageEl.src = ''; imageEl.alt = '';
                    detailsEl.innerHTML = ''; // Svuota contenitore dettagli

                    overlay.classList.add('is-visible');
                    document.body.classList.add('popup-open');

                    try {
                        const response = await fetch(`/api/pianta/${plantId}.json`);
                        if (!response.ok) throw new Error(`API Error: ${response.statusText}`);
                        const data = await response.json();

                        // Popola immagine
                        if (data.photo_macro) {
                             imageEl.src = data.photo_macro;
                             imageEl.alt = data.nome || data.scientific || 'Immagine pianta';
                             imageContainerEl.style.display = 'block';
                        } else {
                             imageContainerEl.style.display = 'none';
                        }


                        // Popola TUTTI i dettagli (incluso nome, sci, desc)
                        // usando l'ordine definito in popupDetailsData e assegnando gridArea
                        detailsEl.innerHTML = ''; // Svuota di nuovo per sicurezza
                        popupDetailsData.forEach(detailInfo => {
                             // Controlla se il dato esiste nell'oggetto 'data'
                             if (data[detailInfo.key] !== undefined && data[detailInfo.key] !== null && data[detailInfo.key] !== '') {
                                 const span = document.createElement('span');
                                 // Assegna lo stile grid-area
                                 if (detailInfo.gridArea) {
                                     span.style.gridArea = detailInfo.gridArea;
                                 } else {
                                     console.warn(`GridArea non definita per ${detailInfo.key}`);
                                 }
                                 // Aggiungi data-key per styling specifico (es. margini)
                                 span.dataset.key = detailInfo.key;
                                 const labelText = `${detailInfo.label}:`; // Aggiunge i due punti
                                 span.innerHTML = `<strong>${labelText}</strong> <span class="detail-value">${data[detailInfo.key]}</span>`;
                                 detailsEl.appendChild(span);
                             }
                         });
                         // Messaggio se non ci sono dettagli
                         if (detailsEl.innerHTML === '') {
                             detailsEl.innerHTML = `<span style="grid-column: 1 / -1;"><strong>Info:</strong> <span class="detail-value">Nessun dettaglio disponibile.</span></span>`;
                         }


                    } catch (error) {
                        console.error("Errore nel caricare dati per popup:", error);
                        detailsEl.innerHTML = `<span style="grid-column: 1 / -1;"><strong>Errore:</strong> <span class="detail-value">Impossibile caricare i dati.</span></span>`;
                         imageContainerEl.style.display = 'none';
                    }
                }

                function closePopup() {
                    overlay.classList.remove('is-visible');
                    document.body.classList.remove('popup-open');
                }

                // Listener apertura
                container.addEventListener('click', (event) => {
                    const link = event.target.closest('a.js-open-popup');
                    if (link) {
                        event.preventDefault();
                        const plantId = link.dataset.id;
                        if (plantId) { openPopup(plantId); }
                    }
                });

                // Listener chiusura
                closeButton.addEventListener('click', closePopup);
                overlay.addEventListener('click', (event) => { if (event.target === overlay) closePopup(); });
                document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && overlay.classList.contains('is-visible')) closePopup(); });
            }

            // Evento di caricamento Astro
            let isInitialized = false;
            document.addEventListener('astro:page-load', () => {
                console.log("Pagina caricata (astro:page-load), inizializzo UI, Preview e Popup...");
                if (!isInitialized) {
                    initializePageUI();
                    initializeImagePreview();
                    initializePopup();
                    isInitialized = true;
                } else {
                     console.log("astro:page-load - Re-inizializzo UI, Preview, Popup");
                     initializePageUI();
                     initializeImagePreview();
                     initializePopup();
                }
            });
             // Fallback per primo caricamento (DOMContentLoaded)
             document.addEventListener('DOMContentLoaded', () => {
                 if (!isInitialized) {
                     console.log("DOMContentLoaded, inizializzo UI, Preview e Popup...");
                     initializePageUI();
                     initializeImagePreview();
                     initializePopup();
                     isInitialized = true;
                 }
             });

        </script>
        </body>
</html>