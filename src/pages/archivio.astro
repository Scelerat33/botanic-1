---
import Airtable from 'airtable';

// Il codice di recupero dati da Airtable rimane identico...
const apiKey = import.meta.env.PUBLIC_AIRTABLE_API_KEY;
const baseId = import.meta.env.PUBLIC_AIRTABLE_BASE_ID;
const tableName = import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME;
const titolo = "URBINO BOTANICAL GARDEN";
let items = [];
let marqueeText = ' â€¢ ';

if (apiKey && baseId && tableName) {
    try {
        const base = new Airtable({ apiKey }).base(baseId);
        const records = await base(tableName).select({ maxRecords: 547 }).all();
        items = records.map(record => ({
            id: record.id,
            nome: record.fields.nome || 'N/D',
            scientific: record.fields.scientific || 'N/D',
            famiglia: record.fields.family || 'N/D',
            categoria: record.fields.category || 'Senza Categoria',
            image: record.fields.photo_macro?.[0]?.thumbnails?.large?.url || record.fields.photo_macro?.[0]?.url,
            description: record.fields.description || 'Nessuna descrizione.',
            divisione: record.fields.cronquist || null,
            classe: record.fields.class || null,
            sottoclasse: record.fields.s_class || null,
            ordine: record.fields.order || null,
            genere: record.fields.genere || null,
            tribÃ¹: record.fields.TribÃ¹ || null,
        }));
        const uniqueFamilies = [...new Set(items.map(item => item.famiglia).filter(Boolean))];
        if (uniqueFamilies.length > 0) {
            marqueeText = uniqueFamilies.slice(0, 10).join(' â€¢ ') + ' â€¢ ';
        }
    } catch (error) {
        console.error("Errore caricamento dati:", error);
    }
}
---

<html lang="it">
<head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{titolo} - Archivio</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<style>
  /* Tutti gli stili CSS rimangono quasi identici, ma vengono rimossi quelli non piÃ¹ necessari */
  :root {
    --bg-color: #ffffff; --text-color: #111111; --subtle-text-color: #666666;
    --border-color: #eaeaea; --font-main: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  }
  html.dark {
    --bg-color: #000000; --text-color: #eaeaea; --subtle-text-color: #999999; --border-color: #000000;
  }
  body { font-family: var(--font-main); background-color: var(--bg-color); color: var(--text-color); margin: 0; transition: background-color 0.3s ease, color 0.3s ease;}

  .site-header { padding: 1rem 1.5rem; border-bottom: 1px solid var(--border-color); position: sticky; top: 0; background-color: var(--bg-color); z-index: 10; }
  .header-content { max-width: 1400px; width: 100%; margin: 0 auto; display: flex; justify-content: space-between; align-items: center; }
  .site-title { font-weight: 600; font-size: 1rem; margin: 0; }
  .site-nav { display: flex; align-items: center; gap: 0.5rem; }
  #search-input { background: none; border: 1px solid var(--border-color); border-radius: 99px; color: var(--text-color); padding: 0.4rem 0.8rem; font-size: 0.9rem; }
  .icon-button { background: none; border: 1px solid var(--border-color); border-radius: 99px; color: var(--text-color); cursor: pointer; display: flex; align-items: center; justify-content: center; width: 36px; height: 36px; padding: 0; text-decoration: none; transition: all 0.2s ease; }
  .icon-button:hover { background-color: var(--border-color); }
  .icon-button svg { stroke: var(--text-color); }

  .marquee-container { width: 100%; overflow: hidden; padding: 1rem 0; border-bottom: 1px solid var(--border-color); cursor: pointer; }
  .marquee-text { font-size: 10rem; font-weight: 600; text-transform: uppercase; white-space: nowrap; display: inline-block; animation: scroll-right-to-left 75s linear infinite; }
  @keyframes scroll-right-to-left { 0% { transform: translateX(0%); } 100% { transform: translateX(-50%); } }
  .main-content { max-width: 1400px; width: 100%; margin: 0 auto; padding: 1.5rem; box-sizing: border-box; }
  .view-switcher { display: flex; border: 1px solid var(--border-color); }
  .view-button { flex: 1; text-align: center; background: none; border: none; color: var(--subtle-text-color); padding: 1rem 0; cursor: pointer; font-size: 0.9rem; font-weight: 500; text-transform: uppercase; transition: all 0.2s ease; }
  .view-button:hover { background-color: var(--border-color); }
  .view-button.active { background-color: var(--text-color); color: var(--bg-color); }
  .view-button + .view-button { border-left: 1px solid var(--border-color); }
  .view-container { display: none; padding-top: 2rem; }
  .view-container.active { display: block; }
  .message { text-align: center; padding: 4rem 1rem; color: var(--subtle-text-color); }
  .grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); gap: 1rem; align-items: start; }
  .card { border: 1px solid var(--border-color); position: relative; cursor: pointer; overflow: hidden; transition: max-height 0.8s cubic-bezier(0.23, 1, 0.32, 1); }
  .card-image-wrapper { position: relative; overflow: hidden; }
  .card-image-wrapper::before { content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(to top, rgba(0, 0, 0, 0.6) 0%, rgba(0, 0, 0, 0) 50%); opacity: 0; transition: opacity 0.3s ease; z-index: 2; }
  .card:hover .card-image-wrapper::before { opacity: 1; }
  .card img { width: 100%; aspect-ratio: 1 / 1; object-fit: cover; display: block; background-color: var(--border-color); }
  .card-content { padding: 0.75rem; }
  .card-content h3 { font-size: 1rem; margin: 0 0 0.2rem 0; }
  .card-content p { font-size: 0.9rem; margin: 0; color: var(--subtle-text-color); }
  .card-details-panel { max-height: 0; opacity: 0; overflow: hidden; padding: 0 1rem; }
  .card-details-panel p { font-size: 0.9rem; line-height: 1.5; margin-bottom: 1.5rem; }
  .taxonomy-list { border-top: 1px solid var(--border-color); padding-top: 0.5rem; font-size: 0.85rem; }
  .taxonomy-item { display: flex; justify-content: space-between; padding: 0.4rem 0; }
  .taxonomy-item span:last-child { color: var(--subtle-text-color); }
  .card.expanded { max-height: 2000px; }
  .card.expanded .card-details-panel { max-height: 1000px; opacity: 1; padding: 0 1rem 1.5rem 1rem; }
  .herbarium-btn { position: absolute; top: 0.5rem; right: 0.5rem; background: rgba(255, 255, 255, 0.7); border-radius: 50%; border: none; cursor: pointer; width: 30px; height: 30px; font-size: 1.5rem; line-height: 28px; text-align: center; color: #111; opacity: 0; transition: all 0.2s ease; z-index: 5; }
  html.dark .herbarium-btn { background: rgba(0,0,0,0.5); color: #fff; }
  .card:hover .herbarium-btn { opacity: 1; }
  .herbarium-btn.active { background: var(--text-color); color: var(--bg-color); opacity: 1; transform: rotate(45deg); }
  .archive-table { width: 100%; border-collapse: collapse; }
  .archive-table th, .archive-table td { text-align: left; padding: 0.75rem 1rem; border-bottom: 1px solid var(--border-color); }
  .archive-table th { font-weight: 600; text-transform: uppercase; font-size: 0.8rem; }
  .archive-table tr:hover { background-color: var(--border-color); }
  .archive-table td img { width: 40px; height: 40px; object-fit: cover; vertical-align: middle; margin-right: 1rem; }
</style>
</head>
<body>

    <header class="site-header">
        <div class="header-content">
            <h1 class="site-title">{titolo}</h1>
            <nav class="site-nav">
                <input type="search" id="search-input" placeholder="Cerca per nome...">
                
                <a href="/personale" class="icon-button" title="Area Personale">
                    <svg xmlns="http://www.w.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
                </a>
                
                <button id="theme-toggle" class="icon-button" title="Cambia tema">ðŸŒ“</button>
            </nav>
        </div>
    </header>

    <div class="marquee-container">
        <div class="marquee-text">{marqueeText.repeat(5)}</div>
    </div>

    <main class="main-content">
        <div class="view-switcher">
            <button class="view-button active" data-view="grid-view">Griglia</button>
            <button class="view-button" data-view="archive-view">Archivio</button>
            </div>

        <div id="grid-view" class="view-container active">
            <div class="grid">
                {items.map(item => (
                    <article class="card item-container" data-id={item.id} data-search-terms={`${item.nome.toLowerCase()} ${item.scientific.toLowerCase()}`}>
                        <div class="card-main-content">
                            <div class="card-image-wrapper">
                                <img src={item.image || 'https://via.placeholder.com/300'} alt={`Foto di ${item.nome}`} loading="lazy" />
                            </div>
                            <div class="card-content">
                                <h3>{item.nome}</h3>
                                <p>{item.scientific}</p>
                            </div>
                        </div>
                        <div class="card-details-panel">
                            <p>{item.description}</p>
                            <div class="taxonomy-list">
                                {item.divisione && <div class="taxonomy-item"><span>Divisione</span> <span>{item.divisione}</span></div>}
                                {item.classe && <div class="taxonomy-item"><span>Classe</span> <span>{item.classe}</span></div>}
                                {item.sottoclasse && <div class="taxonomy-item"><span>Sottoclasse</span> <span>{item.sottoclasse}</span></div>}
                                {item.famiglia && <div class="taxonomy-item"><span>Famiglia</span> <span>{item.famiglia}</span></div>}
                                {item.tribÃ¹ && <div class="taxonomy-item"><span>TribÃ¹</span> <span>{item.tribÃ¹}</span></div>}
                            </div>
                        </div>
                        <button class="herbarium-btn" title="Aggiungi alla tua area personale">+</button>
                    </article>
                ))}
            </div>
        </div>

        <div id="archive-view" class="view-container">
            <table class="archive-table">
                <thead>
                    <tr>
                        <th colspan="2">Nome Comune</th>
                        <th>Nome Scientifico</th>
                        <th>Famiglia</th>
                        <th>Categoria</th>
                    </tr>
                </thead>
                <tbody>
                    {items.map(item => (
                        <tr class="item-container" data-id={item.id} data-search-terms={`${item.nome.toLowerCase()} ${item.scientific.toLowerCase()}`}>
                            <td><img src={item.image || 'https://via.placeholder.com/40'} alt={`Foto di ${item.nome}`} loading="lazy"/></td>
                            <td>{item.nome}</td>
                            <td>{item.scientific}</td>
                            <td>{item.famiglia}</td>
                            <td>{item.categoria}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>

        <p id="no-results-message" class="message" style="display: none;">Nessun risultato trovato per la tua ricerca.</p>
    </main>

<script define:vars={{ items }}>
document.addEventListener('DOMContentLoaded', () => {

    // --- 1. GESTIONE TEMA (DARK/LIGHT) ---
    const themeToggle = document.getElementById('theme-toggle');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
    const applyTheme = (theme) => {
        document.documentElement.classList.toggle('dark', theme === 'dark');
        localStorage.setItem('theme', theme);
    };
    applyTheme(localStorage.getItem('theme') || (prefersDark.matches ? 'dark' : 'light'));
    themeToggle.addEventListener('click', () => {
        const newTheme = document.documentElement.classList.contains('dark') ? 'light' : 'dark';
        applyTheme(newTheme);
    });

    // --- 2. GESTIONE CAMBIO VISUALIZZAZIONE ---
    const viewButtons = document.querySelectorAll('.view-button');
    const viewContainers = document.querySelectorAll('.view-container');
    viewButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetViewId = button.dataset.view;
            viewButtons.forEach(btn => btn.classList.toggle('active', btn === button));
            viewContainers.forEach(container => {
                container.classList.toggle('active', container.id === targetViewId);
            });
        });
    });

    // --- 3. GESTIONE RICERCA ---
    const searchInput = document.getElementById('search-input');
    const allItems = document.querySelectorAll('.item-container');
    const noResultsMessage = document.getElementById('no-results-message');
    searchInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase().trim();
        let visibleCount = 0;
        allItems.forEach(item => {
            const itemTerms = item.dataset.searchTerms;
            const isVisible = itemTerms.includes(searchTerm);
            item.style.display = isVisible ? '' : 'none';
            if(isVisible) visibleCount++;
        });
        noResultsMessage.style.display = visibleCount === 0 ? 'block' : 'none';
    });

    // --- 4. GESTIONE SALVATAGGIO IN COLLEZIONE PERSONALE ---
    // Questa logica rimane qui per permettere di AGGIUNGERE elementi
    let herbariumIds = JSON.parse(localStorage.getItem('herbarium')) || [];
    const saveHerbarium = () => {
        localStorage.setItem('herbarium', JSON.stringify(herbariumIds));
    };
    const updateHerbariumButtons = () => {
        document.querySelectorAll('.herbarium-btn').forEach(btn => {
            const cardId = btn.closest('.item-container').dataset.id;
            btn.classList.toggle('active', herbariumIds.includes(cardId));
        });
    };
    
    document.body.addEventListener('click', e => {
        if (e.target.matches('.herbarium-btn')) {
            e.stopPropagation();
            const card = e.target.closest('.item-container');
            const cardId = card.dataset.id;
            if (herbariumIds.includes(cardId)) {
                herbariumIds = herbariumIds.filter(id => id !== cardId);
            } else {
                herbariumIds.push(cardId);
            }
            saveHerbarium();
            updateHerbariumButtons();
        }
    });

    // --- 5. GESTIONE ESPANSIONE CARD NELLA GRIGLIA ---
    const grid = document.querySelector('#grid-view .grid');
    if (grid) {
        grid.addEventListener('click', (e) => {
            if (e.target.closest('.herbarium-btn')) return;
            const clickedCard = e.target.closest('.card');
            if (!clickedCard) return;
            const currentlyExpanded = grid.querySelector('.card.expanded');
            if (currentlyExpanded && currentlyExpanded !== clickedCard) {
                currentlyExpanded.classList.remove('expanded');
            }
            clickedCard.classList.toggle('expanded');
            if (clickedCard.classList.contains('expanded')) {
                setTimeout(() => clickedCard.scrollIntoView({ behavior: 'smooth', block: 'center' }), 150);
            }
        });
    }
    
    // --- Chiamate iniziali ---
    updateHerbariumButtons();

    // RIMOSSA tutta la logica del poster creator e del rendering dell'erbario
});
</script>

</body>
</html>